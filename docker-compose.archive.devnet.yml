services:
  postgres-ocaml:
    image: postgres
    container_name: postgres-ocaml
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "psql -U postgres -d archive -tAc \"SELECT COUNT(*) FROM pg_database WHERE datname='archive';\" | grep -q '^1$'"]
      # test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 10
    volumes:
      - '/tmp/archive-data-ocaml:/var/lib/postgresql/data'
    ports:
      - "127.0.0.1:3333:${PG_PORT}"

  postgres-openmina:
    image: postgres
    container_name: postgres-openmina
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "psql -U postgres -d archive -tAc \"SELECT COUNT(*) FROM pg_database WHERE datname='archive';\" | grep -q '^1$'"]
      # test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 10
    volumes:
      - '/tmp/archive-data-openmmina:/var/lib/postgresql/data'
    ports:
      - "127.0.0.1:4444:${PG_PORT}"

  create-db:
    image: postgres
    container_name: create-dbs
    env_file:
      - .env
    command: >
      bash -c '
      ls -la /sql
      psql postgres://postgres:${POSTGRES_PASSWORD}@postgres-ocaml:${PG_PORT} -c "CREATE DATABASE ${PG_DB};";
      psql postgres://postgres:${POSTGRES_PASSWORD}@postgres-openmina:${PG_PORT} -c "CREATE DATABASE ${PG_DB};";
      psql postgres://postgres:${POSTGRES_PASSWORD}@postgres-ocaml:${PG_PORT}/${PG_DB} -c "
      ALTER SYSTEM SET max_connections = 500;
      ALTER SYSTEM SET max_locks_per_transaction = 100;
      ALTER SYSTEM SET max_pred_locks_per_relation = 100;
      ALTER SYSTEM SET max_pred_locks_per_transaction = 5000;
      "
      psql postgres://postgres:${POSTGRES_PASSWORD}@postgres-openmina:${PG_PORT}/${PG_DB} -c "
      ALTER SYSTEM SET max_connections = 500;
      ALTER SYSTEM SET max_locks_per_transaction = 100;
      ALTER SYSTEM SET max_pred_locks_per_relation = 100;
      ALTER SYSTEM SET max_pred_locks_per_transaction = 5000;
      "
      psql postgres://postgres:${POSTGRES_PASSWORD}@postgres-ocaml:${PG_PORT}/${PG_DB} -f /sql/archive_schema.sql;
      psql postgres://postgres:${POSTGRES_PASSWORD}@postgres-openmina:${PG_PORT}/${PG_DB} -f /sql/archive_schema.sql;
      '
    volumes:
      - ./producer-dashboard/src/archive/sql:/sql
    depends_on:
      postgres-ocaml:
        condition: service_started
      postgres-openmina:
        condition: service_started

  # create-db:
  #   image: postgres
  #   container_name: create-dbs
  #   env_file:
  #     - .env
  #   command: >
  #     bash -c '
  #     apt update && apt install -y curl tar && apt clean && rm -rf /var/lib/apt/lists/*;
  #     curl -O https://673156464838-mina-archive-node-backups.s3.us-west-2.amazonaws.com/devnet/devnet-archive-dump-$(date +%F_0000).sql.tar.gz;
  #     tar -zxvf devnet-archive-dump-$(date +%F_0000).sql.tar.gz;
  #     psql postgres://postgres:${POSTGRES_PASSWORD}@postgres-ocaml:${PG_PORT} -c "CREATE DATABASE ${PG_DB};";
  #     psql postgres://postgres:${POSTGRES_PASSWORD}@postgres-openmina:${PG_PORT} -c "CREATE DATABASE ${PG_DB};";
  #     psql postgres://postgres:${POSTGRES_PASSWORD}@postgres-ocaml:${PG_PORT}/${PG_DB} -c "
  #     ALTER SYSTEM SET max_connections = 500;
  #     ALTER SYSTEM SET max_locks_per_transaction = 100;
  #     ALTER SYSTEM SET max_pred_locks_per_relation = 100;
  #     ALTER SYSTEM SET max_pred_locks_per_transaction = 5000;
  #     "
  #     psql postgres://postgres:${POSTGRES_PASSWORD}@postgres-openmina:${PG_PORT}/${PG_DB} -c "
  #     ALTER SYSTEM SET max_connections = 500;
  #     ALTER SYSTEM SET max_locks_per_transaction = 100;
  #     ALTER SYSTEM SET max_pred_locks_per_relation = 100;
  #     ALTER SYSTEM SET max_pred_locks_per_transaction = 5000;
  #     "
  #     psql postgres://postgres:${POSTGRES_PASSWORD}@postgres-ocaml:${PG_PORT}/${PG_DB} -f devnet-archive-dump-$(date +%F_0000).sql;
  #     psql postgres://postgres:${POSTGRES_PASSWORD}@postgres-openmina:${PG_PORT}/${PG_DB} -f devnet-archive-dump-$(date +%F_0000).sql;
  #     '
  #   volumes:
  #     - producer-dashboard/src/archive/sql/archive-schema.sql:/archive-schema.sql
  #   depends_on:
  #     postgres-ocaml:
  #       condition: service_started
  #     postgres-openmina:
  #       condition: service_started


#   bootstrap_db:
#     # image: 'minaprotocol/mina-archive:3.0.0-93e0279-bullseye'
#     image: postgres
#     command: >
#       bash -c '
#       apt update && apt install -y curl tar && apt clean && rm -rf /var/lib/apt/lists/*;
#       curl -O https://673156464838-mina-archive-node-backups.s3.us-west-2.amazonaws.com/devnet/devnet-archive-dump-$(date +%F_0000).sql.tar.gz;
#       tar -zxvf devnet-archive-dump-$(date +%F_0000).sql.tar.gz;
#       psql postgres://postgres:${POSTGRES_PASSWORD}@postgres:${PG_PORT} -c "CREATE DATABASE ${PG_DB};";
#       psql postgres://postgres:${POSTGRES_PASSWORD}@postgres:${PG_PORT}/${PG_DB} -c "
#       ALTER SYSTEM SET max_connections = 500;
#       ALTER SYSTEM SET max_locks_per_transaction = 100;
#       ALTER SYSTEM SET max_pred_locks_per_relation = 100;
#       ALTER SYSTEM SET max_pred_locks_per_transaction = 5000;
#       "
#       psql postgres://postgres:${POSTGRES_PASSWORD}@postgres:${PG_PORT}/${PG_DB} -f devnet-archive-dump-$(date +%F_0000).sql;
#       '
#     # For Devnet Network, replace "mainnet" references with "devnet" in the block above
#     depends_on:
#       postgres:
#         condition: service_healthy

  # missing_blocks_guardian:
  #   # image: 'minaprotocol/mina-archive:3.0.0-93e0279-bullseye'
  #   image: 'gcr.io/o1labs-192920/mina-archive:3.0.0-dc6bf78-bullseye' # Use this image for Devnet
  #   command: >
  #     bash -c '
  #     curl -O https://raw.githubusercontent.com/MinaFoundation/helm-charts/main/mina-archive/scripts/missing-blocks-guardian-command.sh;
  #     export GUARDIAN_PRECOMPUTED_BLOCKS_URL=https://673156464838-mina-precomputed-blocks.s3.us-west-2.amazonaws.com/devnet;
  #     export MINA_NETWORK=devnet;
  #     export PG_CONN=postgres://postgres:${POSTGRES_PASSWORD}@postgres:${PG_PORT}/${PG_DB};
  #     while true; do bash missing-blocks-guardian-command.sh; sleep 600; done
  #     '
  #   # For Devnet Network, replace "mainnet" references with "devnet" in the block above
  #   depends_on:
  #     bootstrap_db:
  #       condition: service_completed_successfully


  # archive:
  #   container_name: archive
  #   image: 'minaprotocol/mina-archive:3.0.0-93e0279-bullseye'
  #   restart: always
  #   command: >-
  #     mina-archive run --postgres-uri
  #     postgres://postgres:${POSTGRES_PASSWORD}@postgres:${PG_PORT}/${PG_DB} --server-port 3086
  #   volumes:
  #     - '/tmp/archive-data:/data'
  #   depends_on:
  #     bootstrap_db:
  #       condition: service_completed_successfully


  # mina:
  #   image: 'gcr.io/o1labs-192920/mina-daemon:3.0.0-dc6bf78-bullseye-devnet' # Use this image for Devnet
  #   container_name: mina
  #   ports:
  #     - 8302:8302
  #     - 8301:8301
  #     - 5000:5000
  #   restart: always
  #   environment:
  #     - MINA_CLIENT_TRUSTLIST=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
  #   volumes:
  #     - ./docker/.mina-env:/entrypoint.d/mina-env:ro
  #     - ./docker/keys:/keys:ro
  #     - /tmp/.mina-config:/root/.mina-config
  #   command: daemon
    # depends_on:
    #   bootstrap_db:
    #     condition: service_completed_successfully

